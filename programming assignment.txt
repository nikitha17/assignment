
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.68 (7288) x86_64-apple-darwin13.4.0]

[History restored from /Users/nikithasrinivas/.Rapp.history]

> ## makeCacheMatrix creates a special matrix object, and then cacheSolve 
> ## calculates the inverse of the matrix.
> ## If the matrix inverse has already been calculated, it will instead 
> ## find it in the cache and return it, and not calculate it again.
> 
> makeCacheMatrix <- function(x = matrix()) {
+     inv_x <- NULL
+     set <- function(y) {
+         x <<- y
+         inv_x <<- NULL
+     }
+     get <- function() x
+     setinverse<- function(inverse) inv_x <<-inverse
+     getinverse <- function() inv_x
+     list(set = set, get = get,
+          setinverse = setinverse,
+          getinverse = getinverse)
+ }
> 
> ## The function cacheSolve returns the inverse of a matrix A created with
> ## the makeCacheMatrix function.
> ## If the cached inverse is available, cacheSolve retrieves it, while if
> ## not, it computes, caches, and returns it.
> cacheSolve <- function(x, ...) {
+     ## Return a matrix that is the inverse of 'x'
+     inv_x <- x$getinverse()
+     if (!is.null(inv_x)) {
+         message("getting cached inverse matrix")
+         return(inv_x)
+     } else {
+         inv_x <- solve(x$get())
+         x$setinverse(inv_x)
+         return(inv_x)
+     }
+ }
> 